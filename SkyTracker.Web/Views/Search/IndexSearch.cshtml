﻿@using Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewBag.Title = "Search Database Records";
}

<h2 class="text-center">@ViewBag.Title</h2>
<hr />

<div class="row mb-3">
    <div class="col col-12">
        <div class="input-group">
            <input type="text" id="searchInput" class="form-control" placeholder="Search">
            <button class="btn btn-primary" onclick="searchDB()">Search</button>
            <button class="btn btn-secondary" onclick="clearSearch()">Clear</button>
        </div>
    </div>
</div>

@*Buttons that actively hide and show the radio or checkboxes for "properties" of the search*@
<div class="row mb-3">
    <div class="col col-12">
        <button id="showFormAircraft" class="btn btn-outline-success btn-sm">Search Aircraft</button>
        <button id="showFormAirports" class="btn btn-outline-success btn-sm">Search Airports</button>
        <button id="showFormFlights" class="btn btn-outline-success btn-sm">Search Flights</button>
    </div>
</div>

@*Various "properties" to help filter and narrow down the search*@
<form id="searchForm" style="display: none;">
    <input type="hidden" id="query" name="query" value="">
    <input type="hidden" id="modelType" name="modelType" value="">
    <input type="hidden" id="properties" name="properties" value="">

    <div id="aircraftCheckboxes" style="display: none;">
        <label><input type="radio" name="property" id="aircraftId" value="aircraftId" /> A/C Id</label>
        <label><input type="radio" name="property" id="aircraftRegistration" value="aircraftRegistration" /> A/C Registration</label>
        <label><input type="radio" name="property" id="aircraftEquipment" value="aircraftEquipment" /> A/C Type</label>
    </div>

    <div id="airportCheckboxes" style="display: none;">
        <label><input type="radio" name="property" id="airportIata" value="airportIata" /> IATA</label>
        <label><input type="radio" name="property" id="airportIcao" value="airportIcao" /> ICAO</label>
        <label><input type="radio" name="property" id="airportName" value="airportName" /> Name</label>
        <label><input type="radio" name="property" id="airportCity" value="airportCity" /> City</label>
        <label><input type="radio" name="property" id="airportCountry" value="airportCountry" /> Country</label>
    </div>

    <div id="flightCheckboxes" style="display: none;">
        <label><input type="checkbox" id="flightId" value="flightId" /> Flight Id</label>
        <label><input type="checkbox" id="flightRegistration" value="flightRegistration" /> A/C Registration</label>
        <label><input type="checkbox" id="flightEquipment" value="flightEquipment" /> A/C Type</label>
        <label><input type="checkbox" id="flightNumber" value="flightNumber" /> Flight Number</label>
        <label><input type="checkbox" id="flightDeparture" value="flightDeparture" /> Departure Airport</label>
        <label><input type="checkbox" id="flightArrival" value="flightArrival" /> Arrival Airport</label>
    </div>
</form>

@*Results of the search*@
@if (ViewBag.AircraftResults != null && ViewBag.ModelType == "aircraft")
{
    <div id="aircraftResults" style="display: block;">
        @await Html.PartialAsync("_AircraftResults", (IEnumerable<AircraftAllViewModel>)ViewBag.AircraftResults)
    </div>
}
else if (ViewBag.AirportResults != null && ViewBag.ModelType == "airports")
{
    <div id="airportResults" style="display: block;">
        @await Html.PartialAsync("_AirportResults", (IEnumerable<AirportsAllViewModel>)ViewBag.AirportResults)
    </div>
}
else if (ViewBag.FlightResults != null && ViewBag.ModelType == "flights")
{
    <div id="flightResults" style="display: block;">
        @await Html.PartialAsync("_FlightResults", (IEnumerable<FlightAllViewModel>)ViewBag.FlightResults)
    </div>
}
else
{
    <h3 class="text-center">No results found.</h3>
}

@section Scripts {
    <script>
        // Show the search form boxes when a button is clicked
        $('#showFormAircraft').click(function () {
            $('#aircraftCheckboxes').show();
            $('#airportCheckboxes').hide();
            $('#flightCheckboxes').hide();
            $('#searchForm').slideDown();
        });

        $('#showFormAirports').click(function () {
            $('#aircraftCheckboxes').hide();
            $('#airportCheckboxes').show();
            $('#flightCheckboxes').hide();
            $('#searchForm').slideDown();
        });

        $('#showFormFlights').click(function () {
            $('#aircraftCheckboxes').hide();
            $('#airportCheckboxes').hide();
            $('#flightCheckboxes').show();
            $('#searchForm').slideDown();
        });

        // Depending on which "property" is visible, the search will be performed on that entity type
        function getModelType() {
            if ($('#aircraftCheckboxes').is(':visible')) {
                return 'aircraft';
            } else if ($('#airportCheckboxes').is(':visible')) {
                return 'airports';
            } else if ($('#flightCheckboxes').is(':visible')) {
                return 'flights';
            }
            return null; // Default to null if none of the checkboxes are visible
        }

        // Get the selected properties from the checkboxes/radio buttons
        function getSelectedProperties() {
            var selectedProperties = [];
            var checkboxInputs = document.querySelectorAll('input[type="checkbox"]:checked');
            var selectedRadio = document.querySelector('input[type="radio"][name="property"]:checked');

            // Radio buttons are mutually exclusive, so only one can be selected
            if (selectedRadio) {
                selectedProperties.push(selectedRadio.value);
            }

            // Checkboxes can have multiple selections
            checkboxInputs.forEach(checkbox => {
                selectedProperties.push(checkbox.value);
            });

            return selectedProperties;
        }

        // Submit the form to the SearchController
        function searchDB() {
            var searchValue = document.getElementById("searchInput").value;
            var modelType = getModelType();
            var selectedProperties = getSelectedProperties();

            // Only submit the form if a modelType and at least one property is selected
            if (modelType && selectedProperties.length > 0) {
                var form = document.getElementById("searchForm");
                form.action = "/Search/IndexSearch";
                form.method = "GET";

                // Set the values for query, modelType, and properties
                form.querySelector("#query").value = searchValue;
                form.querySelector("#modelType").value = modelType;
                form.querySelector("#properties").value = selectedProperties.join(",");

                // Remove the 'property' parameter to prevent duplication
                form.querySelectorAll('input[name="property"]').forEach(input => {
                    input.removeAttribute('name');
                });

                form.submit(); // Submit the form
            } else {
                // Display an alert to the user
                alert("Please select at least one property to search.");
            }
        }

        // Uncheck all other radio buttons in the same group when one is clicked
        document.querySelectorAll('input[type="radio"]').forEach(radio => {
            radio.addEventListener('click', function () {
                // Uncheck all other radio buttons in the same group
                var groupName = this.getAttribute('name');
                document.querySelectorAll('input[type="radio"][name="' + groupName + '"]').forEach(rb => {
                    if (rb !== this) {
                        rb.checked = false;
                    }
                });
            });
        });

        // Clear the search input and reload the page
        function clearSearch() {
            document.getElementById("searchInput").value = "";
            window.location.href = "/Search/IndexSearch";
        }
    </script>
}